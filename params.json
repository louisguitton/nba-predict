{
  "name": "Nba-predict",
  "tagline": "Predict NBA games winners with machine learning",
  "body": "# NBA game winner predicter\r\n## Python Crawler to generate the Games Collection\r\nThe data comes from [Odds Portal](http://www.oddsportal.com/basketball/usa)\r\nThe Python crawler uses Scrapy\r\nIt connects to MongoDB locally or to mongolab (mongodb://<dbuser>:<dbpassword>@ds051575.mlab.com:51575/nba-lgu)\r\nIt uses a rendering middleware Splash deployed on a Docker virtual machine\r\n\r\n```bash\r\nmongod\r\n```\r\n```bash\r\ndocker run -p 8050:8050 scrapinghub/splash\r\n```\r\n```bash\r\nscrapy crawl nba\r\n```\r\n\r\nThe Game schema of the resulting DB is described in crawler/nba_odds/itemps.py\r\n\r\n## Extract the DB into csv & Generate the Teams Collection\r\n```bash\r\ncd data\r\nsh mongo2csv.h\r\nnode generate_teams.js\r\n```\r\n\r\n## Admin the DBs\r\nnba MONGODB: user=admin pwd=root\r\nAdmin UI admin:pass\r\n```bash\r\nmongo-express -a\r\n```\r\n\r\n## Preliminary Analysis with Jupyter Notebooks\r\n```bash\r\ncd analysis\r\nipython notebook\r\n```\r\nKey findings:\r\n- the odds are sometimes in the US or UK format\r\n- Winner and Looser scores are following gaussians\r\n- winner and looser odds are following a log-normal distribution\r\n- more interesting to use (home, away) rather than (winner, looser)\r\n- the simple classifier \"lowest odds wins\" as a 70% accuracy\r\n\r\n## Cleanup and Feature Engineering\r\n```bash\r\nnode cleanup.js\r\n```\r\n\r\n## DB Schemas\r\nGame Collection\r\n---------------\r\nHome team\r\nAway team\r\novertime\r\nscore home team\r\nscore away team\r\ndate and time\r\nhow many days of rest for home team\r\nhow many days of rest for away team\r\nPace = number of possessions per game\r\nEfficiency = points / possessions\r\n\r\n\r\nEquipe Collection\r\n-----------------\r\nconference\r\ndivision\r\nnumber of wins\r\nnumber of losses\r\nrank in conference\r\nrank in division\r\n- effective field goal percentage\r\n- Free throw attempt rate\r\n- turnover ratio\r\n- offensive rebound percentage\r\n\r\n## Ideas\r\nThere's a difference between the data you can get after the game (the 4 factors),\r\nand the data you have before the game.\r\nthanks to the stats after the game, you can update your ELO-based model.\r\n\r\npourquoi pas utiliser une chaine de markov pour prédire la prochaine win?\r\nles etats sont les places au classement: on prend une équipe et on regarde quelles est la proba pour cette equipe de rester à ce classement ou bien de bouger\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}